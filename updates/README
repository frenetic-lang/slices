OVERVIEW

This directory contains code for Frenetic's policy update
mechanism. The key files are as follows:

exampes/ - directory of modules
nxtopo.py - class representing topologies
policy.py - class representing policies
print_smv.py - Kripke structure generating functions
run.py - top-level script
update_app.py - update NOX component
update_lib.py - update mechanism implementations
verification_stubs.py - DEPRECATED?

QUICKSTART

(1) Navigate to noxcore/build/src/nox/coreapps/examples and add the
following snippet of XML to meta.xml:

   <component>
    <name>UpdateApp</name>
    <dependency>
      <name>python</name>
    </dependency>
    <python>nox.coreapps.examples.update_app</python>
  </component>

This tells NOX where to find the module identified by "UpdateApp"

(2) Symbolically link update_app.py from this directory
 
  ln -s ~/frenetic-code/updates/update_app.py . 

(3) Execute run.py on a module in the examples directory. For example

  sudo ./run.py routing

Should run a demo showing a per-packet consistent update between two
shortest-path routing policies. 

To see the controller output, type 

  c0 cat /tmp/c0.log 

from the command-line

FOR FRENTIC UPDATE HACKERS

If you check out routing.py, you'll notice that it defines a number of
lists:

  topologies
  initial_topology
  policy
  properties
  
We structure things in this way so that external tools, not being run
through NOX (such as the model checker) can access the topologies and
policies used in each update. 

The routing.py file also defines a function go. By default, executing

  sudo run.py MODULE

invokes main() from MODULE. Other behaviors canbe obtained by passing
a value for the --function command-line argument. For instance,

  sudo run.py routing --function go 1 2

will invoke go(1,2) instead.
